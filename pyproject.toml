[build-system]
build-backend = "hatchling.build"
requires = ["hatchling"]

[project]
name = "waku"
version = "0.12.1"
description = "Framework for building modular and loosely coupled applications"
readme = "README.md"
license = "MIT"
keywords = ["architecture", "modular", "decoupled", "framework", "dishka"]
authors = [
  { name = "Daniil Kharkov", email = "fadeddexofan@gmail.com" },
  { name = "Doctor", email = "thirvondukr@gmail.com" },
]
requires-python = ">=3.11"
classifiers = [
  "Development Status :: 3 - Alpha",
  "Intended Audience :: Developers",
  "License :: OSI Approved :: MIT License",
  "Operating System :: OS Independent",
  "Programming Language :: Python",
  "Programming Language :: Python :: 3 :: Only",
  "Programming Language :: Python :: 3.11",
  "Programming Language :: Python :: 3.12",
  "Programming Language :: Python :: 3.13",
  "Topic :: Software Development :: Libraries",
  "Topic :: Software Development :: Libraries :: Application Frameworks",
  "Typing :: Typed",
]
dependencies = [
  "anyio>=4.7.0",
  "dishka>=1.5.3",
  "typing-extensions>=4.12",
]

[project.urls]
Changelog = "https://github.com/waku-py/waku/blob/master/CHANGELOG.md"
Issues = "https://github.com/waku-py/waku/issues"
Repository = "https://github.com/waku-py/waku"

[tool.hatch.build.targets.sdist]
ignore-vcs = true
only-include = ["src/waku", "tests"]

[dependency-groups]
dev = [
  "pip-audit>=2.9.0",
  "rich>=14.0.0",
]
docs = [
  "mkdocs>=1.6.1",
  "mkdocs-callouts>=1.16.0",
  "mkdocs-exclude>=1.0.2",
  "mkdocs-git-revision-date-localized-plugin>=1.4.5",
  "mkdocs-material>=9.6.12",
  "mkdocs-redirects>=1.2.2",
  "mkdocstrings[python]>=0.29.1",
]
lint = [
  "deptry>=0.23.0",
  "gitlint>=0.19.1",
  "pre-commit>=4.2.0",
  "ruff>=0.11.6",
]
test = [
  "pytest>=8.3.5",
  "pytest-clarity>=1.0.1",
  "pytest-cov>=6.1.0",
  "pytest-deadfixtures>=2.2.1",
  "pytest-mock>=3.14.0",
  "pytest-randomly>=3.16.0",
  "pytest-timeout>=2.3.1",
  "trio>=0.30.0",
  "uvloop>=0.21.0",
]
typecheck = [
  "basedpyright>=1.29.1",
  "mypy>=1.15.0",
]

# ----- UV settings -----
[tool.uv]
default-groups = "all"
required-version = ">=0.6.17"


# ----- Pytest settings -----
[tool.pytest.ini_options]
xfail_strict = true
norecursedirs = ".* examples __pycache__"
disable_test_id_escaping_and_forfeit_all_rights_to_community_support = true
addopts = [
  "--ignore=docs",
  "--doctest-modules",
  "--strict-markers",
  "--strict-config",
  "--cov-fail-under=88",
]
# pytest-timeout settings
timeout = 5
session_timeout = 100

# ----- Coverage settings -----
[tool.coverage.run]
branch = true
source = ["src", "tests"]
omit = ["*__dishka_factory_*"]

[tool.coverage.report]
show_missing = true
skip_covered = true
exclude_also = [
  "def __repr__",
  "raise AssertionError",
  "raise NotImplementedError",
  "if (?:t(yping)?\\.)?TYPE_CHECKING:",
  "@(?:t(yping)?\\.)?overload",
  "@(abc\\.)?abstractmethod",
  "class .*\\(.*\\bProtocol\\b.*\\):",
  "(?:t(yping)?\\.)?assert_never",
]


# ----- Ruff settings -----
[tool.ruff]
unsafe-fixes = true
show-fixes = true
line-length = 120
target-version = "py311"
extend-exclude = ["pyproject.toml"]

[tool.ruff.lint]
preview = true
extend-select = ["ALL"]
ignore = [
  "A005", # Module is shadowing a Python builtin module
  "ANN401", # Dynamically typed expressions (typing.Any) are disallowed
  "COM812", # Trailing comma missing. Conflicts with ruff format
  "CPY", # flake8-copyright
  "D1", # All 1xx pydocstyle codes
  "D203", # 1 blank line required before class docstring
  "D213", # Multi-line docstring summary should start at the second line
  "DOC201", # `return` is not documented in docstring
  "DOC502", # Raised exception is not explicitly raised
  "E501", # Never enforce line length
  "ISC001", # Implicitly concatenated string literals on one line. Conflicts with ruff format
  "RET504", # Unnecessary variable assignment before `return` statement
  "RUF001", # ruff unicode specific rules
  "RUF002", # ruff unicode specific rules
  "RUF003", # ruff unicode specific rules
  "TC006", # Add quotes to type expression in `typing.cast()`
  "TD", # flake8-todos
  "TRY003", # Duplicates EM101 warning
]
unfixable = [
  "B", # Avoid trying to fix flake8-bugbear violations.
  "ERA", # Avoid deleting commented-out code
]

flake8-quotes = { inline-quotes = "single", multiline-quotes = "double" }
mccabe = { max-complexity = 10 }
pydocstyle = { convention = "google" }
pylint = { max-args = 7 }

[tool.ruff.lint.per-file-ignores]
"docs/code/*" = [
  "I001", # Import block is un-sorted or un-formatted
  "INP001", # File is part of an implicit namespace package
  "PLR6301", # Method could be a function, class method, or static method
  "RUF029", # Function is declared async but doesn't use async features
  "S101", # Usage of assert
  "SIM117", # Multiple with-statements should be combined
  "T201", # `print` found
]
"tests/*" = [
  "FBT001", # Boolean-typed positional argument in function definition
  "PLR2004", # Magic value comparison
  "S101", # Usage of assert
  "S311", # Usage of non-cryptographic random
  "TRY002", # Raise Exception or BaseException directly
]


[tool.ruff.lint.flake8-tidy-imports]
ban-relative-imports = "all"

[tool.ruff.lint.isort]
force-wrap-aliases = true
combine-as-imports = true

[tool.ruff.format]
preview = true
quote-style = "single"
docstring-code-format = true


# ----- Deptry settings -----
[tool.deptry]
extend_exclude = ["docs"]
known_first_party = ["waku"]

[tool.deptry.per_rule_ignores]
DEP004 = ["gitlint"]


# ----- Mypy settings -----
[tool.mypy]
# Mypy configuration:
# https://mypy.readthedocs.io/en/latest/config_file.html
exclude = [
  "docs/code",
]
follow_imports = "normal"
allow_redefinition = false
# Any is 'ok' as long as it is a wildcard
disallow_any_explicit = false
ignore_errors = false
ignore_missing_imports = false
implicit_reexport = false
local_partial_types = true
strict = true
strict_optional = true
show_error_codes = true
no_implicit_optional = true
warn_unreachable = true
warn_no_return = true

[[tool.mypy.overrides]]
module = "gitlint.*"
ignore_missing_imports = true


# ----- Semantic release settings -----
[tool.semantic_release]
# TODO: Use two step release when landed
#   https://github.com/python-semantic-release/python-semantic-release/pull/1214
build_command = """
    command -v uv 2>/dev/null || pip install uv
    uv lock
    git add uv.lock
    uv build
"""
assets = []
commit_message = "chore(release): {version} [skip ci]"
commit_parser = "conventional"
logging_use_named_masks = true
major_on_zero = false
allow_zero_version = true
version_toml = ["pyproject.toml:project.version"]
tag_format = "v{version}"

[tool.semantic_release.branches.main]
match = "(master|main)"
prerelease = false
prerelease_token = "rc"

[tool.semantic_release.branches.other]
match = ".*"
prerelease = true
prerelease_token = "dev"

[tool.semantic_release.changelog]
mode = "update"
insertion_flag = "<!-- version list -->"
default_templates = { changelog_file = "CHANGELOG.md" }
template_dir = "non-existing-dir"
exclude_commit_patterns = [
  '''Merge? .*''',
  '''build\((?!deps\): .+)''',
  '''chore(?:\([^)]*?\))?: .+''',
  '''ci(?:\([^)]*?\))?: .+''',
  '''refactor(?:\([^)]*?\))?: .+''',
  '''style(?:\([^)]*?\))?: .+''',
  '''test(?:\([^)]*?\))?: .+''',
]

[tool.semantic_release.changelog.environment]
autoescape = true

[tool.semantic_release.commit_author]
env = "GIT_COMMIT_AUTHOR"
default = "semantic-release <semantic-release>"

[tool.semantic_release.commit_parser_options]
# Also used in `gitlint_plugins.py` for allowed commit types check
allowed_tags = ["build", "chore", "ci", "docs", "feat", "fix", "perf", "style", "refactor", "test"]
minor_tags = ["feat"]
patch_tags = ["fix", "perf"]
default_bump_level = 0
parse_squash_commits = true
ignore_merge_commits = true

[tool.semantic_release.remote]
name = "origin"
type = "github"

[tool.semantic_release.publish]
upload_to_vcs_release = true
